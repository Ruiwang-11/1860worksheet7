/**
 * Corrected 7-segment decoder for segment 'b'
 * Implements full truth table for hexadecimal digits 0-F
 * Student ID: 201890224
 * 
 * Truth table verified:
 * Hex | DCBA | b
 * ----|------|---
 * 0   | 0000 | 1
 * 1   | 0001 | 1
 * 2   | 0010 | 1
 * 3   | 0011 | 1
 * 4   | 0100 | 1
 * 5   | 0101 | 0
 * 6   | 0110 | 0
 * 7   | 0111 | 1
 * 8   | 1000 | 1
 * 9   | 1001 | 1
 * A   | 1010 | 1
 * B   | 1011 | 0
 * C   | 1100 | 0
 * D   | 1101 | 1
 * E   | 1110 | 0
 * F   | 1111 | 0
 */

CHIP DecoderSegment201890224 {
    IN A, B, C, D;
    OUT b;

    PARTS:
    // Generate inverted signals
    Not(in=A, out=nA);
    Not(in=B, out=nB);
    Not(in=C, out=nC);
    Not(in=D, out=nD);

    /* Boolean equation derived from K-map:
       b = ¬D¬C + ¬D¬B + ¬DBA + D¬C¬BA + D¬CB¬A */
    
    // Term1: ¬D¬C (covers 0,1,2,3,8,9)
    And(a=nD, b=nC, out=term1);
    
    // Term2: ¬D¬B (covers 0,1,4,5)
    And(a=nD, b=nB, out=term2);
    
    // Term3: ¬DBA (covers 3,7)
    And(a=nD, b=B, out=w1);
    And(a=w1, b=A, out=term3);
    
    // Term4: D¬C¬BA (covers 9,D)
    And(a=D, b=nC, out=w2);
    And(a=w2, b=nB, out=w3);
    And(a=w3, b=A, out=term4);
    
    // Term5: D¬CB¬A (covers A)
    And(a=w2, b=B, out=w4);
    And(a=w4, b=nA, out=term5);
    
    // Combine terms with OR
    Or(a=term1, b=term2, out=or1);
    Or(a=or1, b=term3, out=or2);
    Or(a=or2, b=term4, out=or3);
    Or(a=or3, b=term5, out=b);
}