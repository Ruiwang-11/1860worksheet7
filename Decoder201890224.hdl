CHIP Decoder201890224 {
    IN A, B, C, D;
    OUT a, b, c, d, e, f, g;

    PARTS:
    // Not gates
    Not(in=A, out=nA);
    Not(in=B, out=nB);
    Not(in=C, out=nC);
    Not(in=D, out=nD);

    /** a = (A + ¬B + C + D)(A + B + C + ¬D)(¬A + ¬B + C + ¬D)(¬A + B + ¬C + ¬D) */
    Or(a=A, b=nB, out=a1);
    Or(a=a1, b=C, out=a2);
    Or(a=a2, b=D, out=t1);

    Or(a=A, b=B, out=a3);
    Or(a=a3, b=C, out=a4);
    Or(a=a4, b=nD, out=t2);

    Or(a=nA, b=nB, out=a5);
    Or(a=a5, b=C, out=a6);
    Or(a=a6, b=nD, out=t3);

    Or(a=nA, b=B, out=a7);
    Or(a=a7, b=nC, out=a8);
    Or(a=a8, b=nD, out=t4);

    And(a=t1, b=t2, out=a_1);
    And(a=a_1, b=t3, out=a_2);
    And(a=a_2, b=t4, out=a);

    /** b = (A + ¬B + C + D)(A + B + C + ¬D)(¬B + ¬C + ¬D)(¬A + B + ¬C + D) */
    Or(a=A, b=nB, out=b1);
    Or(a=b1, b=C, out=b2);
    Or(a=b2, b=D, out=u1);

    Or(a=A, b=B, out=b3);
    Or(a=b3, b=C, out=b4);
    Or(a=b4, b=nD, out=u2);

    Or(a=nB, b=nC, out=b5);
    Or(a=b5, b=nD, out=u3);

    Or(a=nA, b=B, out=b6);
    Or(a=b6, b=nC, out=b7);
    Or(a=b7, b=D, out=u4);

    And(a=u1, b=u2, out=b_1);
    And(a=b_1, b=u3, out=b_2);
    And(a=b_2, b=u4, out=b);

    /** c = (A + B + ¬C + D)(¬A + ¬B + D)(¬A + ¬B + ¬C) */
    Or(a=A, b=B, out=c1);
    Or(a=c1, b=nC, out=c2);
    Or(a=c2, b=D, out=v1);

    Or(a=nA, b=nB, out=c3);
    Or(a=c3, b=D, out=v2);

    Or(a=nA, b=nB, out=c4);
    Or(a=c4, b=nC, out=v3);

    And(a=v1, b=v2, out=c_1);
    And(a=c_1, b=v3, out=c);

    /** d = (A + ¬D)(A + ¬B + C)(B + C + ¬D) */
    Or(a=A, b=nD, out=w1);

    Or(a=A, b=nB, out=d1);
    Or(a=d1, b=C, out=w2);

    Or(a=B, b=C, out=d2);
    Or(a=d2, b=nD, out=w3);

    And(a=w1, b=w2, out=d_1);
    And(a=d_1, b=w3, out=d);

    /** e = (A + ¬B + C + ¬D)(¬B + ¬C + D)(¬A + ¬B + D)(¬A + ¬C + ¬D) */
    Or(a=A, b=nB, out=e1);
    Or(a=e1, b=C, out=e2);
    Or(a=e2, b=nD, out=m1);

    Or(a=nB, b=nC, out=e3);
    Or(a=e3, b=D, out=m2);

    Or(a=nA, b=nB, out=e4);
    Or(a=e4, b=D, out=m3);

    Or(a=nA, b=nC, out=e5);
    Or(a=e5, b=nD, out=m4);

    And(a=m1, b=m2, out=e_1);
    And(a=e_1, b=m3, out=e_2);
    And(a=e_2, b=m4, out=e);

    /** f = (¬A + ¬B + C + ¬D)(A + B + ¬D)(A + B + ¬C)(A + ¬C + ¬D) */
    Or(a=nA, b=nB, out=f1);
    Or(a=f1, b=C, out=f2);
    Or(a=f2, b=nD, out=n1);

    Or(a=A, b=B, out=f3);
    Or(a=f3, b=nD, out=n2);

    Or(a=A, b=B, out=f4);
    Or(a=f4, b=nC, out=n3);

    Or(a=A, b=nC, out=f5);
    Or(a=f5, b=nD, out=n4);

    And(a=n1, b=n2, out=f_1);
    And(a=f_1, b=n3, out=f_2);
    And(a=f_2, b=n4, out=f);

    /** g = (A + B + C)(A + ¬B + ¬C + ¬D)(¬A + ¬B + C + D) */
    Or(a=A, b=B, out=g1);
    Or(a=g1, b=C, out=g2);

    Or(a=A, b=nB, out=g3);
    Or(a=g3, b=nC, out=g4);
    Or(a=g4, b=nD, out=g5);

    Or(a=nA, b=nB, out=g6);
    Or(a=g6, b=C, out=g7);
    Or(a=g7, b=D, out=g8);

    And(a=g2, b=g5, out=g_1);
    And(a=g_1, b=g8, out=g);
}
